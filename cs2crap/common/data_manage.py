import re
import os
import asyncio
import pandas as pd
from math import ceil
from bs4 import BeautifulSoup
from datetime import datetime, timedelta

from cs2crap.common.request_handler import request2
from cs2crap.common.utils import color_print, read_and_fix_csv
from cs2crap.telegram_bot.telegram_notifier import message_sending, send_message
from cs2crap.csgomarket.data_loader import get_csgomarket_items_prices


# ==================================================================================================================================
# |                                                            DATA MANAGE                                                         |
# ==================================================================================================================================


def get_items_list(start: int, count: int, sort_column: str, sort_dir: str):
    """
    ### –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–µ–¥–º–µ—Ç–∞—Ö —Å —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–∞–π–ª new_items.csv.

    ### Parameters:
        - start (int): –ù–∞—á–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤.
        - count (int): –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤.
        - sort_column (str): –ö–æ–ª–æ–Ω–∫–∞ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ ("price" –∏–ª–∏ "popular").
        - sort_dir (str): –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ ("asc" –∏–ª–∏ "desc").

    ### Returns:
        - –î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥–º–µ—Ç—ã –≤ data/new_items.csv (—Å–æ–∑–¥–∞—ë—Ç, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç)
    """

    current_attempt = 1
    max_attempts = 3

    base_url = f"https://steamcommunity.com/market/search/render/?query=&start=@@@&count=100&search_descriptions=0&sort_column={sort_column}&sort_dir={sort_dir}&appid=730"

    df = pd.DataFrame()
    dfs = []

    percentage = 0

    for i in range(start, start + count, 100):
        current_url = base_url.replace("@@@", str(i)).replace("@@@", str(i + 100))

        color_print("status", "done", f"–ü–æ–¥–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤:", True)
        color_print("none", "status", f"[{i + 100} / {start + count}]", False)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –∫–∞–∂–¥—ã–µ 10% –æ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª-–≤–∞:
        if (ceil(i * 100 / (start + count))) % 10 == 0:
            if percentage < ceil(i * 100 / (start + count)):
                percentage = ceil(i * 100 / (start + count))

                send_message(f"üì• *–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö: {percentage}%* üì•")

                color_print("done", "done", "–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:", True)
                color_print("none", "status", f"{percentage}%", False)

        while current_attempt <= max_attempts:
            response_content = request2(current_url, 2, 4, True)

            item_names = re.findall(r'data-hash-name=\\"([^"]+)\\"', response_content)
            item_href = re.findall(r"href=\\\"(https:[^\"]+)\"", response_content)
            image_src = re.findall(r" src=\\.(https:[^\"]+)", response_content)

            item_href = [href.replace("\\", "").replace(" ", "") for href in item_href]
            image_src = [src.replace("\\", "").replace(" ", "") for src in image_src]

            data = {
                "item_name": item_names,
                "item_href": item_href,
                "image_src": image_src,
            }

            try:
                dfs.append(pd.DataFrame(data))
                break
            except Exception as e:
                color_print(
                    "none",
                    "fail",
                    "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: –ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã. –ü—Ä–æ–±—É–µ–º –∑–∞–Ω–æ–≤–æ.",
                    True,
                )
                current_attempt += 1

    df = pd.concat(dfs, ignore_index=True)

    if os.path.isfile("data/new_items.csv"):
        try:
            items_df = read_and_fix_csv("data/new_items.csv")
            df = pd.concat([items_df, df], ignore_index=True)
            df = df.drop_duplicates(subset="item_name", keep="first")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è data/new_items.csv: {e}")

    df.to_csv("data/new_items.csv", index=False, encoding="utf-8")


# ==================================================================================================================================


def get_item_id(item_href: str) -> tuple[int, str]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ item_href.

    Parameters:
        - item_href (str): URL-–∞–¥—Ä–µ—Å –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–∞ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–ª–æ—â–∞–¥–∫–µ.

    Returns:
        - int: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞.
        - response_content: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –ø—Ä–µ–¥–º–µ—Ç–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è volume –±–µ–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.
    """

    response_content = request2(item_href, 2, 4, False)

    id = re.findall(
        r"Market_LoadOrderSpread. ([^..]+) \);.\/\/ initial",
        response_content,
    )

    if id:
        id = int(float(id[0]))

        color_print("done", "done", "id –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ–ª—É—á–µ–Ω:", True)
        color_print("none", "status", id, False)

        return int(id), response_content
    else:
        color_print("fail", "fail", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è id.", True)
        return int(0), response_content


# ==================================================================================================================================


def get_item_prices(item_id: int) -> tuple[float, float]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ –µ–≥–æ ID.

    Parameters:
        - item_id (int): ID –ø—Ä–µ–¥–º–µ—Ç–∞.

    Returns:
        - tuple[float, float]: –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ –∏ —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏.
    """

    ERROR_PRICE = -0.7

    try_count: int = 1

    while try_count < 3:
        response_content = request2(
            f"https://steamcommunity.com/market/itemordershistogram?country=RU&language=russian&currency=5&item_nameid={item_id}&two_factor=0",
            2,
            4,
            False,
        )

        prices = re.findall(r"_promote\\\">([^<>]+) ", response_content)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—Ç–≤–µ—Ç–∞ –∏ —á—Ç–æ –æ–±–µ —Ü–µ–Ω—ã –ø–æ–ª—É—á–µ–Ω—ã
        if (response_content is not None) and (len(prices) == 2):
            prices[0] = prices[0].replace(",", ".")
            prices[1] = prices[1].replace(",", ".")

            color_print("done", "done", "–¶–µ–Ω—ã –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ–ª—É—á–µ–Ω—ã.", True)
            return prices[0], prices[1]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å–ª–∏ —Ü–µ–Ω –Ω–µ—Ç, —Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –¥–≤–µ –ø–æ–ø—ã—Ç–∫–∏
        elif try_count == 2:
            color_print(
                "fail",
                "fail",
                f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω: –≠—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–æ–¥–∞—ë—Ç.",
                True,
            )
            return ERROR_PRICE, ERROR_PRICE

        try_count += 1


# ==================================================================================================================================


def get_item_volume(item_href: str = None, item_page: str = None) -> int:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª-–≤–∞ –ø—Ä–æ–¥–∞–∂ –ø—Ä–µ–¥–º–µ—Ç–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏.

    Parameters:
        - item_href (str): –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –Ω–∞ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–ª–æ—â–∞–¥–∫–µ.
        - item_page (str): –£–∂–µ –ø–æ–¥–≥—Ä—É–∂–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (–∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è id).

    Returns:
        - int: –ö–æ–ª-–≤–æ –ø—Ä–æ–¥–∞–∂ –ø—Ä–µ–¥–º–µ—Ç–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞.
    """

    volume = 0

    current_time = datetime.now()
    current_date = current_time.strftime("%b %d %Y")

    back_time = current_time - timedelta(hours=24)
    formatted_back_date = back_time.strftime("%b %d %Y")

    back_hours_since = back_time.strftime("%H")

    # –ï—Å–ª–∏ –≤ —Ñ—É–Ω–∫—Ü–∏—é –ø–æ—Å—Ç—É–ø–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –ø—Ä–µ–¥–º–µ—Ç–æ–º, —Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–µ –∫–∏–¥–∞–µ—Ç—Å—è
    if item_page is None:
        response_content = request2(item_href, 2, 4, False)
    elif item_page is not None:
        response_content = item_page

    soup = BeautifulSoup(response_content, "html.parser")
    script_tags = soup.find_all("script")

    if script_tags:
        last_script_content = script_tags[-1].string

        current_day_pattern = re.compile(rf"{current_date}.*?\"(\d+)", re.DOTALL)
        current_day_result = current_day_pattern.findall(last_script_content)

        previous_day_pattern = re.compile(
            rf"{formatted_back_date} (\d\d): .*?\"(\d+)",
            re.DOTALL,
        )
        previous_day_result = previous_day_pattern.findall(last_script_content)

    if current_day_result:
        for match in current_day_result:
            volume += int(match)

    if previous_day_result:
        for match in previous_day_result:
            if int(match[0]) >= int(back_hours_since) - 2:
                volume += int(match[1])

    color_print("done", "done", "–ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞:", True)
    (
        color_print("none", "status", volume, False)
        if volume >= 1
        else color_print("none", "warning", volume, False)
    )

    return volume


# ==================================================================================================================================


def double_hook(
    df: pd.DataFrame,
    STM2STM: bool = True,
    CSM2STM: bool = False,
    STM2CSM: bool = True,
    items_count: int = 0,
    stop_cscrap_event: asyncio.Event = None,
) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö (id, –æ–±—ä–µ–º, —Ü–µ–Ω—ã) –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.

    Parameters:
        - df (pd.DataFrame): DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤.
        - STM2STM (bool): –§–ª–∞–≥ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –º–µ—Ç–æ–¥–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ Steam -> Steam (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é True).
        - CSM2STM (bool): –§–ª–∞–≥ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –º–µ—Ç–æ–¥–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ CS:GO Market -> Steam (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é False).
        - STM2CSM (bool): –§–ª–∞–≥ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –º–µ—Ç–æ–¥–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ Steam -> CS:GO Market (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é True).

    Output:
        - None
    """
    item_number = 1
    item_page = None

    for index, row in df.iterrows():
        if not stop_cscrap_event.is_set():
            color_print(
                "status", "status", f"–ü—Ä–µ–¥–º–µ—Ç: [{item_number} / {items_count}]", True
            )

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –∫–∞–∂–¥—ã–µ 10% –æ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª-–≤–∞:
            if (ceil(item_number * 100 / items_count)) % 10 == 0:
                send_message(
                    f"üì° *–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {(item_number * 100 / items_count):.0f}%* üì°"
                )

            df.at[index, "item_name"] = str(df.at[index, "item_name"]).replace(
                "&amp;", "&"
            )

            if CSM2STM or STM2CSM:
                if item_number % 80 == 0:
                    color_print(
                        "status", "status", f"–û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É —Å–∫–∏–Ω–æ–≤ CS:GO Market.", True
                    )
                    get_csgomarket_items_prices()

            id = row.get("id")

            if pd.notna(id) and id != 0:
                color_print("done", "done", "id –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–∞–π–¥–µ–Ω:", True)
                color_print("none", "create", id, False)
            else:
                id, item_page = get_item_id(row["item_href"])
                if pd.notna(id):
                    df.at[index, "id"] = int(id)

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç–∞
            if item_page is not None:
                # –ï—Å–ª–∏ id –±—ã–ª –ø–æ–ª—É—á–µ–Ω, —Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                volume = get_item_volume(item_page=item_page)
            else:
                # –ï—Å–ª–∏ id –±—ã–ª –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ, –∫–∏–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å
                volume = get_item_volume(row["item_href"])
            df.at[index, "volume"] = int(volume)

            if id is not None:
                # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω –ø—Ä–µ–¥–º–µ—Ç–∞
                price_buy, price_sell = get_item_prices(id)

                df.at[index, "price_buy"] = float(price_buy)
                df.at[index, "price_sell"] = float(price_sell)

                methods = {
                    "STM2STM": STM2STM,
                    "CSM2STM": CSM2STM,
                    "STM2CSM": STM2CSM,
                }

                # –û—Ç—Å–µ–∏–≤–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
                if int(volume) >= 25:
                    message_sending(
                        df.at[index, "item_name"],
                        volume,
                        price_buy,
                        price_sell,
                        df.at[index, "item_href"],
                        methods,
                    )

                df = df.astype({"id": "Int64", "volume": "Int64"}, errors="ignore")

                df.to_csv("data/updated_items.csv", index=False, encoding="utf-8")

            item_number += 1


if __name__ == "__main__":
    test_item_href = "https://steamcommunity.com/market/listings/730/AK-47%20%7C%20Slate%20%28Minimal%20Wear%29"

    test_id, test_item_page = get_item_id(test_item_href)
    test_volume = get_item_volume(item_page=test_item_page)
    test_prices = get_item_prices(test_id)
